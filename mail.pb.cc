// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SenderMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_2eproto() {
  protobuf_AddDesc_mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail.proto");
  GOOGLE_CHECK(file != NULL);
  SenderMsg_descriptor_ = file->message_type(0);
  static const int SenderMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, sendermailname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, smtpsvrname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, smtpsvrport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, base64name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, base64passwd_),
  };
  SenderMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderMsg_descriptor_,
      SenderMsg::default_instance_,
      SenderMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderMsg));
  MailMsg_descriptor_ = file->message_type(1);
  static const int MailMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailMsg, receivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailMsg, mailsubject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailMsg, mailcontent_),
  };
  MailMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailMsg_descriptor_,
      MailMsg::default_instance_,
      MailMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderMsg_descriptor_, &SenderMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailMsg_descriptor_, &MailMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_2eproto() {
  delete SenderMsg::default_instance_;
  delete SenderMsg_reflection_;
  delete MailMsg::default_instance_;
  delete MailMsg_reflection_;
}

void protobuf_AddDesc_mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmail.proto\"\213\001\n\tSenderMsg\022\022\n\nsenderName"
    "\030\001 \002(\t\022\026\n\016senderMailName\030\002 \002(\t\022\023\n\013smtpSv"
    "rName\030\003 \002(\t\022\023\n\013smtpSvrPort\030\004 \002(\005\022\022\n\nbase"
    "64Name\030\005 \002(\t\022\024\n\014base64Passwd\030\006 \002(\t\"I\n\007Ma"
    "ilMsg\022\024\n\014receiverName\030\001 \002(\t\022\023\n\013mailSubje"
    "ct\030\002 \002(\t\022\023\n\013mailContent\030\003 \002(\t", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail.proto", &protobuf_RegisterTypes);
  SenderMsg::default_instance_ = new SenderMsg();
  MailMsg::default_instance_ = new MailMsg();
  SenderMsg::default_instance_->InitAsDefaultInstance();
  MailMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_2eproto {
  StaticDescriptorInitializer_mail_2eproto() {
    protobuf_AddDesc_mail_2eproto();
  }
} static_descriptor_initializer_mail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SenderMsg::kSenderNameFieldNumber;
const int SenderMsg::kSenderMailNameFieldNumber;
const int SenderMsg::kSmtpSvrNameFieldNumber;
const int SenderMsg::kSmtpSvrPortFieldNumber;
const int SenderMsg::kBase64NameFieldNumber;
const int SenderMsg::kBase64PasswdFieldNumber;
#endif  // !_MSC_VER

SenderMsg::SenderMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SenderMsg::InitAsDefaultInstance() {
}

SenderMsg::SenderMsg(const SenderMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SenderMsg::SharedCtor() {
  _cached_size_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendermailname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smtpsvrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smtpsvrport_ = 0;
  base64name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base64passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderMsg::~SenderMsg() {
  SharedDtor();
}

void SenderMsg::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendermailname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendermailname_;
  }
  if (smtpsvrname_ != &::google::protobuf::internal::kEmptyString) {
    delete smtpsvrname_;
  }
  if (base64name_ != &::google::protobuf::internal::kEmptyString) {
    delete base64name_;
  }
  if (base64passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete base64passwd_;
  }
  if (this != default_instance_) {
  }
}

void SenderMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderMsg_descriptor_;
}

const SenderMsg& SenderMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

SenderMsg* SenderMsg::default_instance_ = NULL;

SenderMsg* SenderMsg::New() const {
  return new SenderMsg;
}

void SenderMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_sendermailname()) {
      if (sendermailname_ != &::google::protobuf::internal::kEmptyString) {
        sendermailname_->clear();
      }
    }
    if (has_smtpsvrname()) {
      if (smtpsvrname_ != &::google::protobuf::internal::kEmptyString) {
        smtpsvrname_->clear();
      }
    }
    smtpsvrport_ = 0;
    if (has_base64name()) {
      if (base64name_ != &::google::protobuf::internal::kEmptyString) {
        base64name_->clear();
      }
    }
    if (has_base64passwd()) {
      if (base64passwd_ != &::google::protobuf::internal::kEmptyString) {
        base64passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string senderName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderMailName;
        break;
      }

      // required string senderMailName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderMailName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendermailname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendermailname().data(), this->sendermailname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_smtpSvrName;
        break;
      }

      // required string smtpSvrName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smtpSvrName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smtpsvrname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->smtpsvrname().data(), this->smtpsvrname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_smtpSvrPort;
        break;
      }

      // required int32 smtpSvrPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smtpSvrPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smtpsvrport_)));
          set_has_smtpsvrport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_base64Name;
        break;
      }

      // required string base64Name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base64Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base64name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base64name().data(), this->base64name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_base64Passwd;
        break;
      }

      // required string base64Passwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base64Passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base64passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base64passwd().data(), this->base64passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SenderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendername(), output);
  }

  // required string senderMailName = 2;
  if (has_sendermailname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendermailname().data(), this->sendermailname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendermailname(), output);
  }

  // required string smtpSvrName = 3;
  if (has_smtpsvrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smtpsvrname().data(), this->smtpsvrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->smtpsvrname(), output);
  }

  // required int32 smtpSvrPort = 4;
  if (has_smtpsvrport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->smtpsvrport(), output);
  }

  // required string base64Name = 5;
  if (has_base64name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base64name().data(), this->base64name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->base64name(), output);
  }

  // required string base64Passwd = 6;
  if (has_base64passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base64passwd().data(), this->base64passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->base64passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SenderMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string senderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendername(), target);
  }

  // required string senderMailName = 2;
  if (has_sendermailname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendermailname().data(), this->sendermailname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendermailname(), target);
  }

  // required string smtpSvrName = 3;
  if (has_smtpsvrname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smtpsvrname().data(), this->smtpsvrname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->smtpsvrname(), target);
  }

  // required int32 smtpSvrPort = 4;
  if (has_smtpsvrport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->smtpsvrport(), target);
  }

  // required string base64Name = 5;
  if (has_base64name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base64name().data(), this->base64name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->base64name(), target);
  }

  // required string base64Passwd = 6;
  if (has_base64passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base64passwd().data(), this->base64passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->base64passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SenderMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string senderName = 1;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // required string senderMailName = 2;
    if (has_sendermailname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendermailname());
    }

    // required string smtpSvrName = 3;
    if (has_smtpsvrname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smtpsvrname());
    }

    // required int32 smtpSvrPort = 4;
    if (has_smtpsvrport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smtpsvrport());
    }

    // required string base64Name = 5;
    if (has_base64name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base64name());
    }

    // required string base64Passwd = 6;
    if (has_base64passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base64passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderMsg::MergeFrom(const SenderMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_sendermailname()) {
      set_sendermailname(from.sendermailname());
    }
    if (from.has_smtpsvrname()) {
      set_smtpsvrname(from.smtpsvrname());
    }
    if (from.has_smtpsvrport()) {
      set_smtpsvrport(from.smtpsvrport());
    }
    if (from.has_base64name()) {
      set_base64name(from.base64name());
    }
    if (from.has_base64passwd()) {
      set_base64passwd(from.base64passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderMsg::CopyFrom(const SenderMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SenderMsg::Swap(SenderMsg* other) {
  if (other != this) {
    std::swap(sendername_, other->sendername_);
    std::swap(sendermailname_, other->sendermailname_);
    std::swap(smtpsvrname_, other->smtpsvrname_);
    std::swap(smtpsvrport_, other->smtpsvrport_);
    std::swap(base64name_, other->base64name_);
    std::swap(base64passwd_, other->base64passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderMsg_descriptor_;
  metadata.reflection = SenderMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailMsg::kReceiverNameFieldNumber;
const int MailMsg::kMailSubjectFieldNumber;
const int MailMsg::kMailContentFieldNumber;
#endif  // !_MSC_VER

MailMsg::MailMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailMsg::InitAsDefaultInstance() {
}

MailMsg::MailMsg(const MailMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailMsg::SharedCtor() {
  _cached_size_ = 0;
  receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailsubject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailMsg::~MailMsg() {
  SharedDtor();
}

void MailMsg::SharedDtor() {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (mailsubject_ != &::google::protobuf::internal::kEmptyString) {
    delete mailsubject_;
  }
  if (mailcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete mailcontent_;
  }
  if (this != default_instance_) {
  }
}

void MailMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailMsg_descriptor_;
}

const MailMsg& MailMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

MailMsg* MailMsg::default_instance_ = NULL;

MailMsg* MailMsg::New() const {
  return new MailMsg;
}

void MailMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_receivername()) {
      if (receivername_ != &::google::protobuf::internal::kEmptyString) {
        receivername_->clear();
      }
    }
    if (has_mailsubject()) {
      if (mailsubject_ != &::google::protobuf::internal::kEmptyString) {
        mailsubject_->clear();
      }
    }
    if (has_mailcontent()) {
      if (mailcontent_ != &::google::protobuf::internal::kEmptyString) {
        mailcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string receiverName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receivername().data(), this->receivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailSubject;
        break;
      }

      // required string mailSubject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailSubject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailsubject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailsubject().data(), this->mailsubject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mailContent;
        break;
      }

      // required string mailContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailcontent().data(), this->mailcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string receiverName = 1;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->receivername(), output);
  }

  // required string mailSubject = 2;
  if (has_mailsubject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailsubject().data(), this->mailsubject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mailsubject(), output);
  }

  // required string mailContent = 3;
  if (has_mailcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailcontent().data(), this->mailcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mailcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string receiverName = 1;
  if (has_receivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receivername().data(), this->receivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receivername(), target);
  }

  // required string mailSubject = 2;
  if (has_mailsubject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailsubject().data(), this->mailsubject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailsubject(), target);
  }

  // required string mailContent = 3;
  if (has_mailcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailcontent().data(), this->mailcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mailcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string receiverName = 1;
    if (has_receivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivername());
    }

    // required string mailSubject = 2;
    if (has_mailsubject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailsubject());
    }

    // required string mailContent = 3;
    if (has_mailcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailcontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailMsg::MergeFrom(const MailMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receivername()) {
      set_receivername(from.receivername());
    }
    if (from.has_mailsubject()) {
      set_mailsubject(from.mailsubject());
    }
    if (from.has_mailcontent()) {
      set_mailcontent(from.mailcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailMsg::CopyFrom(const MailMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MailMsg::Swap(MailMsg* other) {
  if (other != this) {
    std::swap(receivername_, other->receivername_);
    std::swap(mailsubject_, other->mailsubject_);
    std::swap(mailcontent_, other->mailcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailMsg_descriptor_;
  metadata.reflection = MailMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
