// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#ifndef PROTOBUF_mail_2eproto__INCLUDED
#define PROTOBUF_mail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mail_2eproto();
void protobuf_AssignDesc_mail_2eproto();
void protobuf_ShutdownFile_mail_2eproto();

class SenderMsg;
class MailMsg;
class CheckIdReturnMsg;
class SendMailReturnMsg;

// ===================================================================

class SenderMsg : public ::google::protobuf::Message {
 public:
  SenderMsg();
  virtual ~SenderMsg();

  SenderMsg(const SenderMsg& from);

  inline SenderMsg& operator=(const SenderMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SenderMsg& default_instance();

  void Swap(SenderMsg* other);

  // implements Message ----------------------------------------------

  SenderMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SenderMsg& from);
  void MergeFrom(const SenderMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string senderName = 1;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 1;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // required string senderMailName = 2;
  inline bool has_sendermailname() const;
  inline void clear_sendermailname();
  static const int kSenderMailNameFieldNumber = 2;
  inline const ::std::string& sendermailname() const;
  inline void set_sendermailname(const ::std::string& value);
  inline void set_sendermailname(const char* value);
  inline void set_sendermailname(const char* value, size_t size);
  inline ::std::string* mutable_sendermailname();
  inline ::std::string* release_sendermailname();
  inline void set_allocated_sendermailname(::std::string* sendermailname);

  // required string smtpSvrName = 3;
  inline bool has_smtpsvrname() const;
  inline void clear_smtpsvrname();
  static const int kSmtpSvrNameFieldNumber = 3;
  inline const ::std::string& smtpsvrname() const;
  inline void set_smtpsvrname(const ::std::string& value);
  inline void set_smtpsvrname(const char* value);
  inline void set_smtpsvrname(const char* value, size_t size);
  inline ::std::string* mutable_smtpsvrname();
  inline ::std::string* release_smtpsvrname();
  inline void set_allocated_smtpsvrname(::std::string* smtpsvrname);

  // required int32 smtpSvrPort = 4;
  inline bool has_smtpsvrport() const;
  inline void clear_smtpsvrport();
  static const int kSmtpSvrPortFieldNumber = 4;
  inline ::google::protobuf::int32 smtpsvrport() const;
  inline void set_smtpsvrport(::google::protobuf::int32 value);

  // required string base64Name = 5;
  inline bool has_base64name() const;
  inline void clear_base64name();
  static const int kBase64NameFieldNumber = 5;
  inline const ::std::string& base64name() const;
  inline void set_base64name(const ::std::string& value);
  inline void set_base64name(const char* value);
  inline void set_base64name(const char* value, size_t size);
  inline ::std::string* mutable_base64name();
  inline ::std::string* release_base64name();
  inline void set_allocated_base64name(::std::string* base64name);

  // required string base64Passwd = 6;
  inline bool has_base64passwd() const;
  inline void clear_base64passwd();
  static const int kBase64PasswdFieldNumber = 6;
  inline const ::std::string& base64passwd() const;
  inline void set_base64passwd(const ::std::string& value);
  inline void set_base64passwd(const char* value);
  inline void set_base64passwd(const char* value, size_t size);
  inline ::std::string* mutable_base64passwd();
  inline ::std::string* release_base64passwd();
  inline void set_allocated_base64passwd(::std::string* base64passwd);

  // @@protoc_insertion_point(class_scope:SenderMsg)
 private:
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_sendermailname();
  inline void clear_has_sendermailname();
  inline void set_has_smtpsvrname();
  inline void clear_has_smtpsvrname();
  inline void set_has_smtpsvrport();
  inline void clear_has_smtpsvrport();
  inline void set_has_base64name();
  inline void clear_has_base64name();
  inline void set_has_base64passwd();
  inline void clear_has_base64passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendername_;
  ::std::string* sendermailname_;
  ::std::string* smtpsvrname_;
  ::std::string* base64name_;
  ::std::string* base64passwd_;
  ::google::protobuf::int32 smtpsvrport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static SenderMsg* default_instance_;
};
// -------------------------------------------------------------------

class MailMsg : public ::google::protobuf::Message {
 public:
  MailMsg();
  virtual ~MailMsg();

  MailMsg(const MailMsg& from);

  inline MailMsg& operator=(const MailMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailMsg& default_instance();

  void Swap(MailMsg* other);

  // implements Message ----------------------------------------------

  MailMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailMsg& from);
  void MergeFrom(const MailMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string receiverName = 1;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceiverNameFieldNumber = 1;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // required string mailSubject = 2;
  inline bool has_mailsubject() const;
  inline void clear_mailsubject();
  static const int kMailSubjectFieldNumber = 2;
  inline const ::std::string& mailsubject() const;
  inline void set_mailsubject(const ::std::string& value);
  inline void set_mailsubject(const char* value);
  inline void set_mailsubject(const char* value, size_t size);
  inline ::std::string* mutable_mailsubject();
  inline ::std::string* release_mailsubject();
  inline void set_allocated_mailsubject(::std::string* mailsubject);

  // required string mailContent = 3;
  inline bool has_mailcontent() const;
  inline void clear_mailcontent();
  static const int kMailContentFieldNumber = 3;
  inline const ::std::string& mailcontent() const;
  inline void set_mailcontent(const ::std::string& value);
  inline void set_mailcontent(const char* value);
  inline void set_mailcontent(const char* value, size_t size);
  inline ::std::string* mutable_mailcontent();
  inline ::std::string* release_mailcontent();
  inline void set_allocated_mailcontent(::std::string* mailcontent);

  // @@protoc_insertion_point(class_scope:MailMsg)
 private:
  inline void set_has_receivername();
  inline void clear_has_receivername();
  inline void set_has_mailsubject();
  inline void clear_has_mailsubject();
  inline void set_has_mailcontent();
  inline void clear_has_mailcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* receivername_;
  ::std::string* mailsubject_;
  ::std::string* mailcontent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static MailMsg* default_instance_;
};
// -------------------------------------------------------------------

class CheckIdReturnMsg : public ::google::protobuf::Message {
 public:
  CheckIdReturnMsg();
  virtual ~CheckIdReturnMsg();

  CheckIdReturnMsg(const CheckIdReturnMsg& from);

  inline CheckIdReturnMsg& operator=(const CheckIdReturnMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckIdReturnMsg& default_instance();

  void Swap(CheckIdReturnMsg* other);

  // implements Message ----------------------------------------------

  CheckIdReturnMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckIdReturnMsg& from);
  void MergeFrom(const CheckIdReturnMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CheckIdReturnMsg)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static CheckIdReturnMsg* default_instance_;
};
// -------------------------------------------------------------------

class SendMailReturnMsg : public ::google::protobuf::Message {
 public:
  SendMailReturnMsg();
  virtual ~SendMailReturnMsg();

  SendMailReturnMsg(const SendMailReturnMsg& from);

  inline SendMailReturnMsg& operator=(const SendMailReturnMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMailReturnMsg& default_instance();

  void Swap(SendMailReturnMsg* other);

  // implements Message ----------------------------------------------

  SendMailReturnMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMailReturnMsg& from);
  void MergeFrom(const SendMailReturnMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SendMailReturnMsg)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static SendMailReturnMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SenderMsg

// required string senderName = 1;
inline bool SenderMsg::has_sendername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SenderMsg::set_has_sendername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SenderMsg::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SenderMsg::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& SenderMsg::sendername() const {
  return *sendername_;
}
inline void SenderMsg::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void SenderMsg::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void SenderMsg::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderMsg::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* SenderMsg::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderMsg::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string senderMailName = 2;
inline bool SenderMsg::has_sendermailname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SenderMsg::set_has_sendermailname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SenderMsg::clear_has_sendermailname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SenderMsg::clear_sendermailname() {
  if (sendermailname_ != &::google::protobuf::internal::kEmptyString) {
    sendermailname_->clear();
  }
  clear_has_sendermailname();
}
inline const ::std::string& SenderMsg::sendermailname() const {
  return *sendermailname_;
}
inline void SenderMsg::set_sendermailname(const ::std::string& value) {
  set_has_sendermailname();
  if (sendermailname_ == &::google::protobuf::internal::kEmptyString) {
    sendermailname_ = new ::std::string;
  }
  sendermailname_->assign(value);
}
inline void SenderMsg::set_sendermailname(const char* value) {
  set_has_sendermailname();
  if (sendermailname_ == &::google::protobuf::internal::kEmptyString) {
    sendermailname_ = new ::std::string;
  }
  sendermailname_->assign(value);
}
inline void SenderMsg::set_sendermailname(const char* value, size_t size) {
  set_has_sendermailname();
  if (sendermailname_ == &::google::protobuf::internal::kEmptyString) {
    sendermailname_ = new ::std::string;
  }
  sendermailname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderMsg::mutable_sendermailname() {
  set_has_sendermailname();
  if (sendermailname_ == &::google::protobuf::internal::kEmptyString) {
    sendermailname_ = new ::std::string;
  }
  return sendermailname_;
}
inline ::std::string* SenderMsg::release_sendermailname() {
  clear_has_sendermailname();
  if (sendermailname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendermailname_;
    sendermailname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderMsg::set_allocated_sendermailname(::std::string* sendermailname) {
  if (sendermailname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendermailname_;
  }
  if (sendermailname) {
    set_has_sendermailname();
    sendermailname_ = sendermailname;
  } else {
    clear_has_sendermailname();
    sendermailname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string smtpSvrName = 3;
inline bool SenderMsg::has_smtpsvrname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SenderMsg::set_has_smtpsvrname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SenderMsg::clear_has_smtpsvrname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SenderMsg::clear_smtpsvrname() {
  if (smtpsvrname_ != &::google::protobuf::internal::kEmptyString) {
    smtpsvrname_->clear();
  }
  clear_has_smtpsvrname();
}
inline const ::std::string& SenderMsg::smtpsvrname() const {
  return *smtpsvrname_;
}
inline void SenderMsg::set_smtpsvrname(const ::std::string& value) {
  set_has_smtpsvrname();
  if (smtpsvrname_ == &::google::protobuf::internal::kEmptyString) {
    smtpsvrname_ = new ::std::string;
  }
  smtpsvrname_->assign(value);
}
inline void SenderMsg::set_smtpsvrname(const char* value) {
  set_has_smtpsvrname();
  if (smtpsvrname_ == &::google::protobuf::internal::kEmptyString) {
    smtpsvrname_ = new ::std::string;
  }
  smtpsvrname_->assign(value);
}
inline void SenderMsg::set_smtpsvrname(const char* value, size_t size) {
  set_has_smtpsvrname();
  if (smtpsvrname_ == &::google::protobuf::internal::kEmptyString) {
    smtpsvrname_ = new ::std::string;
  }
  smtpsvrname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderMsg::mutable_smtpsvrname() {
  set_has_smtpsvrname();
  if (smtpsvrname_ == &::google::protobuf::internal::kEmptyString) {
    smtpsvrname_ = new ::std::string;
  }
  return smtpsvrname_;
}
inline ::std::string* SenderMsg::release_smtpsvrname() {
  clear_has_smtpsvrname();
  if (smtpsvrname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = smtpsvrname_;
    smtpsvrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderMsg::set_allocated_smtpsvrname(::std::string* smtpsvrname) {
  if (smtpsvrname_ != &::google::protobuf::internal::kEmptyString) {
    delete smtpsvrname_;
  }
  if (smtpsvrname) {
    set_has_smtpsvrname();
    smtpsvrname_ = smtpsvrname;
  } else {
    clear_has_smtpsvrname();
    smtpsvrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 smtpSvrPort = 4;
inline bool SenderMsg::has_smtpsvrport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SenderMsg::set_has_smtpsvrport() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SenderMsg::clear_has_smtpsvrport() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SenderMsg::clear_smtpsvrport() {
  smtpsvrport_ = 0;
  clear_has_smtpsvrport();
}
inline ::google::protobuf::int32 SenderMsg::smtpsvrport() const {
  return smtpsvrport_;
}
inline void SenderMsg::set_smtpsvrport(::google::protobuf::int32 value) {
  set_has_smtpsvrport();
  smtpsvrport_ = value;
}

// required string base64Name = 5;
inline bool SenderMsg::has_base64name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SenderMsg::set_has_base64name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SenderMsg::clear_has_base64name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SenderMsg::clear_base64name() {
  if (base64name_ != &::google::protobuf::internal::kEmptyString) {
    base64name_->clear();
  }
  clear_has_base64name();
}
inline const ::std::string& SenderMsg::base64name() const {
  return *base64name_;
}
inline void SenderMsg::set_base64name(const ::std::string& value) {
  set_has_base64name();
  if (base64name_ == &::google::protobuf::internal::kEmptyString) {
    base64name_ = new ::std::string;
  }
  base64name_->assign(value);
}
inline void SenderMsg::set_base64name(const char* value) {
  set_has_base64name();
  if (base64name_ == &::google::protobuf::internal::kEmptyString) {
    base64name_ = new ::std::string;
  }
  base64name_->assign(value);
}
inline void SenderMsg::set_base64name(const char* value, size_t size) {
  set_has_base64name();
  if (base64name_ == &::google::protobuf::internal::kEmptyString) {
    base64name_ = new ::std::string;
  }
  base64name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderMsg::mutable_base64name() {
  set_has_base64name();
  if (base64name_ == &::google::protobuf::internal::kEmptyString) {
    base64name_ = new ::std::string;
  }
  return base64name_;
}
inline ::std::string* SenderMsg::release_base64name() {
  clear_has_base64name();
  if (base64name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base64name_;
    base64name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderMsg::set_allocated_base64name(::std::string* base64name) {
  if (base64name_ != &::google::protobuf::internal::kEmptyString) {
    delete base64name_;
  }
  if (base64name) {
    set_has_base64name();
    base64name_ = base64name;
  } else {
    clear_has_base64name();
    base64name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string base64Passwd = 6;
inline bool SenderMsg::has_base64passwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SenderMsg::set_has_base64passwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SenderMsg::clear_has_base64passwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SenderMsg::clear_base64passwd() {
  if (base64passwd_ != &::google::protobuf::internal::kEmptyString) {
    base64passwd_->clear();
  }
  clear_has_base64passwd();
}
inline const ::std::string& SenderMsg::base64passwd() const {
  return *base64passwd_;
}
inline void SenderMsg::set_base64passwd(const ::std::string& value) {
  set_has_base64passwd();
  if (base64passwd_ == &::google::protobuf::internal::kEmptyString) {
    base64passwd_ = new ::std::string;
  }
  base64passwd_->assign(value);
}
inline void SenderMsg::set_base64passwd(const char* value) {
  set_has_base64passwd();
  if (base64passwd_ == &::google::protobuf::internal::kEmptyString) {
    base64passwd_ = new ::std::string;
  }
  base64passwd_->assign(value);
}
inline void SenderMsg::set_base64passwd(const char* value, size_t size) {
  set_has_base64passwd();
  if (base64passwd_ == &::google::protobuf::internal::kEmptyString) {
    base64passwd_ = new ::std::string;
  }
  base64passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SenderMsg::mutable_base64passwd() {
  set_has_base64passwd();
  if (base64passwd_ == &::google::protobuf::internal::kEmptyString) {
    base64passwd_ = new ::std::string;
  }
  return base64passwd_;
}
inline ::std::string* SenderMsg::release_base64passwd() {
  clear_has_base64passwd();
  if (base64passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base64passwd_;
    base64passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SenderMsg::set_allocated_base64passwd(::std::string* base64passwd) {
  if (base64passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete base64passwd_;
  }
  if (base64passwd) {
    set_has_base64passwd();
    base64passwd_ = base64passwd;
  } else {
    clear_has_base64passwd();
    base64passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MailMsg

// required string receiverName = 1;
inline bool MailMsg::has_receivername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailMsg::set_has_receivername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailMsg::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailMsg::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& MailMsg::receivername() const {
  return *receivername_;
}
inline void MailMsg::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void MailMsg::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
}
inline void MailMsg::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailMsg::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    receivername_ = new ::std::string;
  }
  return receivername_;
}
inline ::std::string* MailMsg::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailMsg::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::kEmptyString) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mailSubject = 2;
inline bool MailMsg::has_mailsubject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailMsg::set_has_mailsubject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailMsg::clear_has_mailsubject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailMsg::clear_mailsubject() {
  if (mailsubject_ != &::google::protobuf::internal::kEmptyString) {
    mailsubject_->clear();
  }
  clear_has_mailsubject();
}
inline const ::std::string& MailMsg::mailsubject() const {
  return *mailsubject_;
}
inline void MailMsg::set_mailsubject(const ::std::string& value) {
  set_has_mailsubject();
  if (mailsubject_ == &::google::protobuf::internal::kEmptyString) {
    mailsubject_ = new ::std::string;
  }
  mailsubject_->assign(value);
}
inline void MailMsg::set_mailsubject(const char* value) {
  set_has_mailsubject();
  if (mailsubject_ == &::google::protobuf::internal::kEmptyString) {
    mailsubject_ = new ::std::string;
  }
  mailsubject_->assign(value);
}
inline void MailMsg::set_mailsubject(const char* value, size_t size) {
  set_has_mailsubject();
  if (mailsubject_ == &::google::protobuf::internal::kEmptyString) {
    mailsubject_ = new ::std::string;
  }
  mailsubject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailMsg::mutable_mailsubject() {
  set_has_mailsubject();
  if (mailsubject_ == &::google::protobuf::internal::kEmptyString) {
    mailsubject_ = new ::std::string;
  }
  return mailsubject_;
}
inline ::std::string* MailMsg::release_mailsubject() {
  clear_has_mailsubject();
  if (mailsubject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailsubject_;
    mailsubject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailMsg::set_allocated_mailsubject(::std::string* mailsubject) {
  if (mailsubject_ != &::google::protobuf::internal::kEmptyString) {
    delete mailsubject_;
  }
  if (mailsubject) {
    set_has_mailsubject();
    mailsubject_ = mailsubject;
  } else {
    clear_has_mailsubject();
    mailsubject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mailContent = 3;
inline bool MailMsg::has_mailcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailMsg::set_has_mailcontent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailMsg::clear_has_mailcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailMsg::clear_mailcontent() {
  if (mailcontent_ != &::google::protobuf::internal::kEmptyString) {
    mailcontent_->clear();
  }
  clear_has_mailcontent();
}
inline const ::std::string& MailMsg::mailcontent() const {
  return *mailcontent_;
}
inline void MailMsg::set_mailcontent(const ::std::string& value) {
  set_has_mailcontent();
  if (mailcontent_ == &::google::protobuf::internal::kEmptyString) {
    mailcontent_ = new ::std::string;
  }
  mailcontent_->assign(value);
}
inline void MailMsg::set_mailcontent(const char* value) {
  set_has_mailcontent();
  if (mailcontent_ == &::google::protobuf::internal::kEmptyString) {
    mailcontent_ = new ::std::string;
  }
  mailcontent_->assign(value);
}
inline void MailMsg::set_mailcontent(const char* value, size_t size) {
  set_has_mailcontent();
  if (mailcontent_ == &::google::protobuf::internal::kEmptyString) {
    mailcontent_ = new ::std::string;
  }
  mailcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailMsg::mutable_mailcontent() {
  set_has_mailcontent();
  if (mailcontent_ == &::google::protobuf::internal::kEmptyString) {
    mailcontent_ = new ::std::string;
  }
  return mailcontent_;
}
inline ::std::string* MailMsg::release_mailcontent() {
  clear_has_mailcontent();
  if (mailcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mailcontent_;
    mailcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailMsg::set_allocated_mailcontent(::std::string* mailcontent) {
  if (mailcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete mailcontent_;
  }
  if (mailcontent) {
    set_has_mailcontent();
    mailcontent_ = mailcontent;
  } else {
    clear_has_mailcontent();
    mailcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CheckIdReturnMsg

// required int32 error_code = 1;
inline bool CheckIdReturnMsg::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckIdReturnMsg::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckIdReturnMsg::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckIdReturnMsg::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 CheckIdReturnMsg::error_code() const {
  return error_code_;
}
inline void CheckIdReturnMsg::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// SendMailReturnMsg

// required int32 error_code = 1;
inline bool SendMailReturnMsg::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMailReturnMsg::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMailReturnMsg::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMailReturnMsg::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SendMailReturnMsg::error_code() const {
  return error_code_;
}
inline void SendMailReturnMsg::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mail_2eproto__INCLUDED
